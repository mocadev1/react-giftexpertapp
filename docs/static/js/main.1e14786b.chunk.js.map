{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAiCeA,EA9BK,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAELC,mBAAS,IAFJ,mBAElCC,EAFkC,KAEtBC,EAFsB,KAmBzC,OACI,sBAAMC,SAZW,SAAEC,GAEnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SApBc,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,a,+BCRnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,uEAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAiBZM,GAjBY,4CAAH,sDCYLO,EAVK,SAAC,GAAqB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAE3B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCuBGO,EA1BC,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAAgB,ECER,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAqBxC,OAdAC,qBAAW,WACPxB,EAASC,GACJwB,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAAEpB,IAIEqB,EDrB0BK,CAAc1B,GAAlCa,EAFmB,EAExBN,KAAaa,EAFW,EAEXA,QAErB,OACI,qCACI,mCAAOpB,EAAP,OAEEoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAAEC,GAAF,OACR,cAAC,EAAD,eAESA,GADAA,EAAIC,aEiBtBgB,EAhCM,WAAM,MAGazC,mBAAS,CAAC,0BAHvB,mBAGhB0C,EAHgB,KAGJ3C,EAHI,KAYvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MClBlC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.1e14786b.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddCategory = ( { setCategories } ) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = ( e ) => {\n        setInputValue( e.target.value );\n    };\n\n    const handleSubmit = ( e ) => {\n\n        e.preventDefault();\n\n        if( inputValue.trim().length > 2 ) {\n            setCategories( cats => [ inputValue, ...cats ] );\n            setInputValue('');\n        }\n\n    }\n    \n    return (\n        <form onSubmit={ handleSubmit }>\n            <input\n                type=\"text\"\n                value={ inputValue }\n                onChange= { handleInputChange }\n            />\n        </form>\n    );\n}\n\nexport default AddCategory\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n};\n","export const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&lang=es&limit=10&api_key=uwz8zqvnsCEQtNHMZLhPUxRpBzp877Xq`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n    \n    /**\n     * Al ser una funci칩n async retorna una promesa que resuelve la colecci칩n de las im치genes\n     */\n    return gifs;\n    \n}","import React from 'react'\n\nconst GifGridItem = ( { title, url} ) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p> { title } </p>\n        </div>\n    )\n}\n\nexport default GifGridItem\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ( { category } ) => {\n    \n    const { data:images, loading } = useFetchGifs( category );\n    \n    return (\n        <> \n            <h3> { category } </h3>\n\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n\n            <div className=\"card-grid\">\n\n                {\n                    images.map( ( img ) => (\n                        <GifGridItem\n                            key={img.id}\n                            { ...img }\n                        />\n                    ) )\n                }\n\n            </div>\n        </>\n    )\n}\n\nexport default GifGrid\n","// Custom Hook\n\nimport { useEffect, useState } from 'react'\n\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        getGifs( category )\n            .then( imgs => {\n                \n                setState({\n                    data: imgs,\n                    loading: false\n                });\n\n            });\n    }, [ category ] );\n\n\n\n    return state; // { data:[], loading: true };\n    \n    \n\n}\n\n\n","import React, { useState } from 'react'\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    // const categories = ['One Punch', 'Shippuden', 'Darling in the Franxx'];\n    const [categories, setCategories] = useState(['Darling in the Franxx']);\n\n    // const handleAdd = ( ) => setCategories( [...categories, 'category'] ); // Mi soluci칩n a la tarea\n    /** \n     * El setCategories que retorna el useState puede recibir un callback como argumento,\n     * a este callback se le pasa como argumento el estado actual del componente\n     */\n    // const handleAdd = ( ) => setCategories( cats => [...cats, 'category'] );\n    \n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories } />\n            <hr/>\n\n            <ol>\n                {\n                    categories.map( category => (\n                        <GifGrid \n                            key={ category }\n                            category={ category }\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    );\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}